import cv2
import time
import requests
import sqlite3
import tkinter as tk
from tkinter import ttk, simpledialog, messagebox
from datetime import datetime
from pyzbar.pyzbar import decode
from PIL import Image, ImageTk

# ƒê·ªçc d·ªØ li·ªáu t·ª´ SQLite
def load_product_data_from_db(db_file='products.db'):
    products = {}
    conn = sqlite3.connect(db_file)
    c = conn.cursor()
    try:
        c.execute("SELECT barcode, name, price FROM products")
        for barcode, name, price in c.fetchall():
            products[barcode.strip()] = {'name': name.strip(), 'price': int(price)}
    except sqlite3.Error as e:
        print("‚ùå L·ªói khi ƒë·ªçc DB:", e)
    finally:
        conn.close()
    return products

cooldown = 3
cart = {}
last_scanned_time = {}
product_data = load_product_data_from_db()
cap = cv2.VideoCapture(0)

# G·ª≠i h√≥a ƒë∆°n v·ªÅ web
def send_receipt_to_web():
    items, total = [], 0
    for item in cart.values():
        total += item['price'] * item['quantity']
        items.append({
            "name": item['name'],
            "price": item['price'],
            "quantity": item['quantity']
        })
    try:
        requests.post("http://127.0.0.1:5000/update_receipt", json={"items": items, "total": total})
    except:
        pass

# C·∫≠p nh·∫≠t giao di·ªán
def update_receipt():
    total = 0
    for row in tree.get_children():
        tree.delete(row)
    for item in cart.values():
        line_total = item['price'] * item['quantity']
        tree.insert('', tk.END, values=(
            f"{item['name']} (x{item['quantity']})",
            f"{item['price']:,}",
            item['quantity'],
            f"{line_total:,}"
        ))
        total += line_total
    total_label.config(text=f"T·ªïng c·ªông: {total:,} VND")
    count_label.config(text=f"S·ªë m√≥n: {len(cart)}")
    send_receipt_to_web()

def remove_item():
    selected = tree.selection()
    if selected:
        name_raw = tree.item(selected[0])['values'][0]
        name = name_raw.split(' (x')[0]
        for barcode, item in list(cart.items()):
            if item['name'] == name:
                del cart[barcode]
                break
        update_receipt()

def clear_cart():
    if messagebox.askyesno("X√°c nh·∫≠n", "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a to√†n b·ªô gi·ªè h√†ng kh√¥ng?"):
        cart.clear()
        update_receipt()
        status_label.config(text="üóëÔ∏è Gi·ªè h√†ng ƒë√£ ƒë∆∞·ª£c x√≥a to√†n b·ªô", foreground="red")

def edit_quantity():
    selected = tree.selection()
    if selected:
        name_raw = tree.item(selected[0])['values'][0]
        name = name_raw.split(' (x')[0]
        for barcode, item in cart.items():
            if item['name'] == name:
                qty = simpledialog.askinteger("S·ª≠a s·ªë l∆∞·ª£ng", f"S·ªë l∆∞·ª£ng m·ªõi cho {name}:", initialvalue=item['quantity'], minvalue=1)
                if qty is not None:
                    cart[barcode]['quantity'] = qty
                    update_receipt()
                break

def save_receipt():
    if cart:
        now = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        filename = f"receipt_{now}.txt"
        with open(filename, "w", encoding="utf-8") as f:
            f.write("======= H√ìA ƒê∆†N =======\n")
            total = 0
            for item in cart.values():
                line_total = item['price'] * item['quantity']
                f.write(f"{item['name']:<25} {item['price']:>10,} x {item['quantity']:>2} = {line_total:,}\n")
                total += line_total
            f.write(f"-----------------------------\nT·ªîNG: {total:,} VND\n")
        print(f"üìù H√≥a ƒë∆°n ƒë√£ l∆∞u: {filename}")
        status_label.config(text=f"üíæ ƒê√£ l∆∞u h√≥a ƒë∆°n: {filename}", foreground="blue")

# Giao di·ªán Tkinter
root = tk.Tk()
root.title("Qu√©t m√£ v·∫°ch & H√≥a ƒë∆°n")
root.geometry("1100x640")
style = ttk.Style()
style.configure("Treeview", rowheight=28)

# Left: Camera
frame_left = ttk.Frame(root)
frame_left.pack(side=tk.LEFT, padx=10, pady=10)
tk.Label(frame_left, text="üì∑ Camera", font=("Arial", 12, "bold")).pack()
video_label = ttk.Label(frame_left)
video_label.pack()

# Right: H√≥a ƒë∆°n
frame_right = ttk.Frame(root)
frame_right.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=10, pady=10)
tk.Label(frame_right, text="üßæ H√ìA ƒê∆†N MUA H√ÄNG", font=("Arial", 14, "bold")).pack(pady=(0, 5))

columns = ("T√™n (xS·ªë l∆∞·ª£ng)", "Gi√°", "S·ªë l∆∞·ª£ng", "T·∫°m t√≠nh")
tree_frame = ttk.Frame(frame_right)
tree_frame.pack()

tree_scroll = ttk.Scrollbar(tree_frame)
tree_scroll.pack(side=tk.RIGHT, fill=tk.Y)

tree = ttk.Treeview(tree_frame, columns=columns, show='headings', height=15, yscrollcommand=tree_scroll.set)
tree_scroll.config(command=tree.yview)
for col in columns:
    tree.heading(col, text=col)
    tree.column(col, anchor=tk.CENTER)
tree.pack()

count_label = ttk.Label(frame_right, text="S·ªë m√≥n: 0", font=("Arial", 12))
count_label.pack()

total_label = ttk.Label(frame_right, text="T·ªïng c·ªông: 0 VND", font=("Arial", 14, "bold"))
total_label.pack()

btn_frame = ttk.Frame(frame_right)
btn_frame.pack(pady=10)
ttk.Button(btn_frame, text="üíæ L∆∞u H√≥a ƒê∆°n", command=save_receipt).pack(side=tk.LEFT, padx=5)
ttk.Button(btn_frame, text="üóëÔ∏è X√≥a M√≥n", command=remove_item).pack(side=tk.LEFT, padx=5)
ttk.Button(btn_frame, text="‚úèÔ∏è S·ª≠a SL", command=edit_quantity).pack(side=tk.LEFT, padx=5)
ttk.Button(btn_frame, text="üßπ X√≥a to√†n b·ªô", command=clear_cart).pack(side=tk.LEFT, padx=5)

status_label = ttk.Label(root, text="", font=("Arial", 11), foreground="green")
status_label.pack(side=tk.BOTTOM, fill=tk.X)

# C·∫≠p nh·∫≠t camera
def update_camera():
    ret, frame = cap.read()
    if ret:
        for barcode in decode(frame):
            x, y, w, h = barcode.rect
            cv2.rectangle(frame, (x, y), (x+w, y+h), (0, 255, 0), 2)
            data = barcode.data.decode("utf-8")
            now = time.time()
            if now - last_scanned_time.get(data, 0) < cooldown:
                continue
            last_scanned_time[data] = now
            if data in product_data:
                p = product_data[data]
                if data not in cart:
                    cart[data] = {'name': p['name'], 'price': p['price'], 'quantity': 1}
                else:
                    cart[data]['quantity'] += 1
                update_receipt()
                text = f"{p['name']} - {p['price']} VND"
                cv2.putText(frame, text, (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 0), 2)
                status_label.config(text=f"‚úÖ ƒê√£ th√™m: {p['name']}", foreground="green")
            else:
                status_label.config(text="‚ùå M√£ v·∫°ch kh√¥ng c√≥ trong CSDL", foreground="red")

        rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        img = Image.fromarray(rgb).resize((500, 380))  # Resize preview
        imgtk = ImageTk.PhotoImage(image=img)
        video_label.imgtk = imgtk
        video_label.configure(image=imgtk)

    root.after(10, update_camera)

update_camera()
root.mainloop()
cap.release()
cv2.destroyAllWindows()
